* Debugging internal defines
  - Work out why the following isn't working:
    #+BEGIN_SRC scm
    (eval (let ((a '*undefined*)
          (b '*undefined))
      (set a b)
      (set b 1)
      (cons a b) (setup-environment)
    #+END_SRC
    Look at let->combination of this.
* Register machine
  - Introduce typed pointer representation
    - These will never be contructed directly by the assembly program,
      but will be constructed in the assembler by operations such as
      ~const~ and ~cons~.
    - Types:
      - Empty list
      - Integer
      - Pair
      - Symbol
  - Symbol handling
    - Need to intern symbols when first encountered
    - Read must also intern symbols
    - Introduce symbol table for this
  - ~read~ is a primitive provided by the machine, which should read
    from the standard input, intern symbols and create a list, leaving
    the pair in the given register argument.
  - ~print~ is an operation of the machine which will print the
    representation of whatever is in the given register.
  - Machine interface:
    - registers:
      - whatever is requested
    - memory blocks/vectors (all of fixed size):
      - stack
      - the-cars
      - the-cdrs
      - new-cars
      - new-cdrs
      Could provide ability to declare vectors and their sizes as
      parameters to the machine.
    - operations:
      - read
      - print
      - vector-ref
      - vector-set
      - max number of pairs (to trigger garbage collection)
      - arithmetic
        - +
        - *
        - -
        - /
      - symbol->string and string->symbol (require char type)
    - special forms:
      - save
      - restore
      - assign
      - perform
      - test
      - branch
      - goto
    - If we decided to not have the machine be aware of the typed
      pointer representation, ~read~ and ~print~ couldn't be
      implemented.
* Error representation
  - Representing errors as values doesn't work as they are not
    propagated e.g. ~(cons (+ 'a 1) 2)~ will not raise the
    error. Also, ~assoc~ doesn't need to return an error and can just
    return ~#f~, as is the correct Scheme behaviour.
  - In the absence of a proper exception system, propose having
    ~make-error~ jump to a configurable error handler:
    - By default, propagate as a system error
    - In the interpreter, jump back to the repl
    - In test code, jump to a custom function to verify the error has
      been raised.
    Really need to unwind the stack, however, as otherwise a whole
    bunch of memory is never reclaimed. Either that or recreate the
    stack, if possible.
* +Changing how errors work+
  - Change assoc to return ~#f~ if not found and the pair if found.
  - Remove ~lookup-in-frame~, which is equivalent to ~car~ then
    ~assoc~.
  - Get ~lookup-in-env~ to return an error code instead of a symbol,
    and remove the symbol.
  - Change test case by assigning a test error handler and asserting
    that it is called.
  - Change all other uses of ~make-error~.
* Print
  1. Complete definition of SPRINT
     - Symbols:
       - Store list of lists of characters, with offset into list
         being the list of characters of a symbol. Valid as symbols
         are never deleted. Inefficient linear-time lookup - better to
         use continuously-allocated memory but unclear whether this
         should be fixed-size or not and how to handle variable-length
         symbols.
     - Lists (when value is a pair):
       1. Print ~(~
       2. Sprint CAR
       3. If CDR is a pair, print ~ ~ and GOTO #2
       4. Elif CDR is the empty list, print ~)~
       5. Else print ~ . ~ sprint CDR then print ~)~
     - Tests:
       1. sprint beyond end of buffer throws an error
       2. Sprint with no space throws an error
       3. Nested sprint error throws an error (run out of space
          half-way through a nested int)
       4.
* TODO test READ
* TODO REPL [3/7]
  - [X] Print messages on error
    - Store string messages in static area of memory, plus index into
      this for fast access.
  - [X] Implement quote
  - [X] Support printing lambda and primitives
  - [ ] Add new primitives
    - car
    - cdr
    - list
    - *
    - =
  - [ ] Ability to quit
  - [ ] Negative numbers?
  - [ ] Test printing lambdas and primitives
* Compilation
  - In SICP, meaning of registers is constant. In our virtual machine,
    registers are general purpose, and there may be less registers
    than required for each value (exp, val, argl etc.)
  - Conceptually easy to convert a lambda definition into static code
    (notwithstanding register usage which is non-trivial.
  - Given the curent free registers, a target register and any
    prerequistites required to compile a given expression, provide a
    wrapper function which will optionally generate stack push and pop
    instrutions and provide the compilation routine with the requested
    number of registers to use (including the target register).
  - When dealing with symbols, need to intern the symbol at runtime
    (unless it's a predefined symbol, in which case it's known at
    compile time).
  - ~quote~ effectively needs compile-time ~read~. Could initially
    implement by calling out to ~read~ and parsing the stringified
    expression.
