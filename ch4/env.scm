(define-module (sicp ch4 env))

(define (enclosing-environment env)
  (cdr env))

(define (first-frame env)
  (car env))

(define-public the-empty-environment '())

(define (make-frame variables values)
  (list (map cons variables values)))

(define (frame-bindings frame)
  (car frame))

(define (set-frame-bindings! frame bindings)
  (set-car! frame bindings))

(define (frame-variables frame)
  (map car (frame-bindings frame)))

(define (frame-values frame)
  (map cdr (frame-bindings frame)))

(define (add-binding-to-frame! var val frame)
  (set-frame-bindings! frame (cons (cons var val) (frame-bindings frame))))

(define-public (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))

(define-public (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar bindings))
             (cdar bindings))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-bindings frame)))))
  (env-loop env))

(define-public (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? var (caar bindings))
             (set-cdr! (car bindings) val))
            (else (scan (cdr bindings)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
        (let ((frame (first-frame env)))
          (scan (frame-bindings frame)))))
  (env-loop env))

(define-public (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (caar bindings))
             (set-cdr! (car bindings) val))
            (else (scan (cdr bindings)))))
    (scan (frame-bindings frame))))
